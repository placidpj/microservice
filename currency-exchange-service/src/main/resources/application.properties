spring.application.name=currency-exchange
server.port=8000
spring.config.import=optional:configserver:http://localhost:8888


spring.jpa.show-sql=true
spring.datasource.url=jdbc:h2:mem:testdb

#Enables h2 console. use http://localhost:8000/h2-console to open
spring.h2.console.enabled=true

#By default data.sql is loaded before the tables are created, 
#so we have to use below property to differ the execution to data.sql 
spring.jpa.defer-datasource-initialization=true

# Tell on which port of eureka namin server to register on, default port of eureka server is 8761
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka

# Custom configuration for number of retries for sample-api endpoint
# Here, "sample-api-name" in the below property comes from @Retry(name = "sample-api-name") which is defined
# on the endpoint in the CircuitBreakerController.java class
resilience4j.retry.instances.sample-api-name.max-attempts=5

# Custom wait duration between retry calls. We set 1 second duration below.
resilience4j.retry.instances.sample-api-name.wait-duration=1s

# If this is set to true, the time will increase every time exponentially before hitting another request.
resilience4j.retry.instances.sample-api-name.enable-exponential-backoff=true

#============Circuit breaker====================
# Only if 90% of request fails then switch circuit breaker to open state
resilience4j.circuitbreaker.instances.default.failure-rate-threshold=90

# number of calls
resilience4j.ratelimiter.instances.default.limit-for-period=2

# duration(10 seconds) in which above 2 call can be made. Every 10 seconds 2 calls can be made. For more then 2
# we will get error response.
resilience4j.ratelimiter.instances.default.limit-refresh-period=10s

#xxxxxxxxxxxx Circuit breaker end xxxxxxxxxxxxxxxx


# for spring boot 2.7 or less
spring.sleuth.sampler.probability=1.0
# for spring boot 2.7 or less
spring.zipkin.base-url=http://192.168.99.100:9411/

#=============== Zipkin properties =====================
#for spring boot 3.0.1 or above
# instead of spring.sleuth.sampler.probability=1.0 
management.tracing.sampling.probability=1.0

management.zipkin.tracing.endpoint=http://192.168.99.100:9411/api/v2/spans

# to include the traceID and spanId in the logs
logging.pattern.level=%5p[${spring.application.name:}, %X{traceId:-}, %X{spanId:-}]

#xxxxxxxxxxxxxxx Zipkin properties end xxxxxxxxxxxxxxxxxx
